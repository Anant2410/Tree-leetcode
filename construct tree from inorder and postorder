TreeNode* f(vector<int>& inorder,int is, int ie, vector<int>& postorder, int ps, int pe, 
               unordered_map<int, int>& mp)
    {
        if(is > ie || ps > pe) return NULL;
        
        TreeNode* root = new TreeNode(postorder[pe]);
        int inroot = mp[root->val];
        int numsleft = inroot- is;
        
        root->left = f(inorder,is,inroot-1,postorder,ps,ps+numsleft-1,mp);
        
        root->right = f(inorder,inroot+1,ie,postorder,ps+numsleft,pe-1,mp);
        
        return root;
    }
    TreeNode* buildTree(vector<int>& inorder, vector<int>& postorder) {
        unordered_map<int,int> mp;
        for(int i=0;i<inorder.size();i++)
        {
            mp[inorder[i]] = i;
        }
        TreeNode* root = f(inorder,0,inorder.size()-1,postorder,0,postorder.size()-1,mp);
        
        return root;
    }
