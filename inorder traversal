/* recursive one

void f(TreeNode* root,  vector<int>& ans){
        if(!root) return;
        f(root->left,ans);
        ans.push_back(root->val);
        f(root->right,ans);
    }
    vector<int> inorderTraversal(TreeNode* root) {
        vector<int> ans;
        f(root,ans);
        return ans;
    }
    
  */
  
  */ interative method
  vector<int> inorderTraversal(TreeNode* root) {
        vector<int> ans;
        stack<TreeNode*> st;
        
        while(root || !st.empty()){
            while(root){
                st.push(root);
                root = root->left;
            }
                root = st.top();
                st.pop();
                ans.push_back(root->val);
                root = root->right;
        }
        return ans;
    }
    
    */
 
 /* morris  one
 vector<int> inorderTraversal(TreeNode* root) {
        vector<int> ans;
        TreeNode* curr=root;
        TreeNode* prev;
        
        while(curr!=NULL){
            if(curr->left==NULL){
                ans.push_back(curr->val);
                curr = curr->right;
            }
            else{
                prev = curr->left;
                while(prev->right && prev->right != curr){
                    prev = prev->right;
                }
                if(prev->right==NULL){
                    prev->right = curr;
                    curr = curr->left;
                }
                else{
                    prev->right=NULL;
                    ans.push_back(curr->val);
                    curr = curr->right;
                }
            }
        }
        return ans;
    }
    */
