apply the reverse preorder (node right left) and print the 1st element of every level//

void f(TreeNode* root, int level, vector<int>& ans){
        if(root==NULL) return;
        if(level == ans.size()) ans.push_back(root->val);
        
        f(root->right, level+1,ans);
        f(root->left, level+1, ans);
    }
    vector<int> rightSideView(TreeNode* root) {
        vector<int> ans;
        f(root,0,ans);
        return ans;
    }
    
    
    // for left side just call the root->left before the root->right//
    
    
    void f(Node* root, int level, vector<int>& ans){
    if(root==NULL) return ;
     if(level == ans.size()) ans.push_back(root->data);
     f(root->left,level+1,ans);
     f(root->right,level+1,ans);
}
vector<int> leftView(Node *root)
{
   vector<int> ans;
   f(root,0,ans);
   return ans;
}
