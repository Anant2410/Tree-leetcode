void f(TreeNode* root, unordered_map<TreeNode*, TreeNode*>& mp, TreeNode* t){       // function to store the parent oof every node///
        queue<TreeNode*> q;
        q.push(root);
        while(!q.empty()){
            TreeNode* curr = q.front();
            q.pop();
            if(curr->left){
                mp[curr->left] = curr;
                q.push(curr->left);
            }
            if(curr->right){
                mp[curr->right] = curr;
                q.push(curr->right);
            }
        }
    }
    vector<int> distanceK(TreeNode* root, TreeNode* target, int k) {
        vector<int> ans;
        unordered_map<TreeNode*, TreeNode*> mp;                                                      
        f(root,mp,target);
        queue<TreeNode*> q;                                                             // declare a queue//
        unordered_map<TreeNode*, bool> vis;                                               // visited map that tells weather the node is visited or node///
        q.push(target);                                                          
        vis[target] = true;
        int dist = 0;
        
        while(!q.empty()){
            int size = q.size();
            if(dist++ == k) break;
            
            for(int i=0;i<size;i++){                  
                TreeNode* curr = q.front();
                q.pop();
                if(curr->left && !vis[curr->left]){                          // for left
                    vis[curr->left] = true;
                    q.push(curr->left);
                }
                if(curr->right && !vis[curr->right]){                            // for right
                    vis[curr->right] = true;
                    q.push(curr->right);
                }
                if(mp[curr] && !vis[mp[curr]]){                                    // for parent
                    vis[mp[curr]] = true;
                    q.push(mp[curr]);
                }
            }
        }
        while(!q.empty()){
            TreeNode* x = q.front();
            q.pop();
            ans.push_back(x->val);
        }
        return ans;
    }
